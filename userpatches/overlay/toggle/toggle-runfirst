#!/usr/bin/python3

import configparser
import yaml
import secrets
import string
import hashlib
import os
import time

def make_key(length):
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for i in range(length))

def hash_password(password):
    salt = get_salt()
    return hashlib.sha512((password + salt).encode()).hexdigest()

def get_salt():
    fname = '/home/debian/.octoprint/config.yaml'
    with open(fname, "r") as f_in:
        config = yaml.safe_load(f_in)
        salt = config.get("accessControl", {}).get("salt", make_key(32))
        config.setdefault("accessControl", {})["salt"] =  salt
        with open(fname, "w") as f_out:
            yaml.safe_dump(config, f_out, default_flow_style=False)
        return salt

def get_password():
    local = configparser.ConfigParser()
    local.read('/etc/toggle/local.cfg')
    return local.get("OctoPrint", 'password', fallback=make_key(10))

def update_toggle_config(password, apikey):
    local = configparser.ConfigParser()
    local["OctoPrint"] = {
      'user': 'toggle',
      'password': password,
      'authentication': apikey
    }
    with open('/etc/toggle/local.cfg', 'w') as configfile:
      local.write(configfile)

def update_user_config(password, fname):
    password_hash = hash_password(password)
    with open(fname, 'r') as f_in:
      users = yaml.safe_load(f_in) or {}
      toggle = users.get('toggle', {})
      apikey = toggle.get('apikey', make_key(30))
      toggle = {
        'active': True,
        'apikey': apikey,
        'groups': ['users'],
        'password': password_hash,
        'permissions': [],
        'roles': ['user'],
        'settings': {}
      }
      users['toggle'] = toggle
      with open(fname, 'w') as f_out:
          yaml.safe_dump(users, f_out, default_flow_style=False)
      return apikey

fname = '/home/debian/.octoprint/users.yaml'

while True:
  if os.path.exists(fname):
    passwd = get_password()
    apikey = update_user_config(passwd, fname)
    update_toggle_config(passwd, apikey)
    os.system("systemctl disable toggle-runfirst")
    exit(0)
  else:
    time.sleep(1)
